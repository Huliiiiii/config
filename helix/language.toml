[language-server]
deno = { command = "deno", args = [
  "lsp",
] }
emmet-ls = { command = "emmet-ls", args = [
  "--stdio",
] }
terraform-ls = { command = "terraform-ls", args = [
  "serve",
] }

[language-server.typos]
# typos-lsp must be on your PATH, or otherwise change this to an absolute path to typos-lsp
command = "typos-lsp"
# Logging level of the language server. Defaults to error.
# Run with helix -v to output LSP logs to the editor log (:log-open)
environment = { "RUST_LOG" = "error" }
# Custom config. Used together with a config file found in the workspace or its parents,
# taking precedence for settings declared in both. Equivalent to the typos `--config` cli argument.
config.config = "~/code/typos-lsp/crates/typos-lsp/tests/typos.toml"
# How typos are rendered in the editor, can be one of an Error, Warning, Info or Hint.
# Defaults to Warning.
config.diagnosticSeverity = "Warning"

# rust
[language-server.rust-analyzer]

[language-server.rust-analyzer.config.check]
command = "clippy"

[[language]]
language-servers = [
  "rust-analyzer",
  "typos",
]
name = "rust"

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
experimental = {}
format = { enable = true }
nodePath = ""
problems = { shortenToSingleLine = false }
quiet = false
rulesCustomizations = [
]
run = "onType"
validate = "on"

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation  = { enable = false }

[language-server.vscode-json-language-server.config]
json             = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css              = { validate = { enable = true } }
less             = { validate = { enable = true } }
provideFormatter = true
scss             = { validate = { enable = true } }

[[language]]
auto-format = true
formatter = { command = "prettier", args = [
  "--parser",
  "typescript",
] }
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
name = "typescript"

[[language]]
auto-format = true
formatter = { command = "prettier", args = [
  "--parser",
  "typescript",
] }
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
  "emmet-ls",
]
name = "tsx"

[[language]]
auto-format = true
formatter = { command = "prettier", args = [
  "--parser",
  "typescript",
] }
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
]
name = "javascript"

[[language]]
auto-format = true
formatter = { command = "prettier", args = [
  "--parser",
  "typescript",
] }
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
  "emmet-ls",
]
name = "jsx"

[[language]]
auto-format = true
formatter = { command = 'prettier', args = [
  "--parser",
  "html",
] }
language-servers = [
  "vscode-html-language-server",
  "emmet-ls",
]
name = "html"

[[language]]
auto-format = true
formatter = { command = 'prettier', args = [
  "--parser",
  "css",
] }
language-servers = [
  "vscode-css-language-server",
  "emmet-ls",
]
name = "css"

# json
[[language]]
auto-format = true
formatter = { command = "prettier", args = [
  "--parser",
  "json",
] }
name = "json"

# yaml
[language-server.yaml-language-server.config.yaml]
format     = { enable = true }
validation = true

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json"                                     = ".github/workflows/*.{yml,yaml}"
"https://raw.githubusercontent.com/ansible-community/schemas/main/f/ansible-tasks.json" = "roles/{tasks,handlers}/*.{yml,yaml}"

# toml
[language-server.taplo.config]
root_dir = [
  "*.toml",
  ".git",
]

[[language]]
auto-format = true
formatter = { command = "taplo", args = [
  "fmt",
  "-",
] }
name = "toml"

[[language]]
language-id = "terraform"
language-servers = [
  "terraform-ls",
]
name = "hcl"

[[language]]
language-id = "terraform-vars"
language-servers = [
  "terraform-ls",
]
name = "tfvars"

[[language]]
formatter = { command = "dprint", args = [
  "fmt",
  "--stdin",
  "md",
] }
language-servers = [
  "markdown-oxide",
]
name = "markdown"
